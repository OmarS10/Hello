
discount----------
solde :  int total1=0;
int len=prices.length;
Arrays.sort(prices);
for(int i=0;i<len-1;i++) {
total1=total1+prices[i];}
return (int)((total1+(float)((prices[len-1])-((prices[len-1])
*discount/100f))));
tendreverszero -------------
 if (ints.length != 0) {
    int near = ints[0];
    for (int i = 0; i < ints.length; i++) {
        if (Math.abs(ints[i]) <= Math.abs(near)) {
            
            if (ints[i] == -near) {
                near = Math.abs(ints[i]);
            } else {
                near = ints[i];
            }
        }
    }
    return near;
} else {
    return 0;
}
findlargest -------------------
int max = numbers[0];
         int i ; 
        
        for (i = 1; i < numbers.length; i++)
            if (numbers[i] > max)
                max = numbers[i];
         
        return max; 
	}
find smallestintervalle ---------
Arrays.sort(numbers) ; 
int diff = numbers[1] - numbers[0];
int diffNew = 0 ;

for (int i =1 ; i<numbers.length-1 ; i++) {
diffNew = numbers[i+1] - numbers[i] ; 
if (diffNew <diff) {
diff = diffNew ;
} };
return diff
}
calcarray ---------- 
int sum = 0 ; 
for (int i = n1 ; i<n2 ; i++) {
sum += array[i] ; 
}
return sum ; 
robot ------- 
boolean bulky = ...
boolean heavy = mass>=20;
if (bulky && heavy) 
else if (bulky || heavy)
else return standard
echo ----- 
int index = 0 ;
int count = args.lenght ; 
while (index<count) { sysout (args[index]);
index ++;}
return ; 
/** Approximation de PI**/

 static double approx(double[][] pts) {
       int i;
       int successCount=0;
    for( i = 0; i < pts.length;i++){
         double[] point = pts[i];
         double x = point[0];
         double y = point[1];
          if ((Math.pow(x, 2) + Math.pow(y, 2)) <= 1){
                successCount++;
            }
        }
	    return (double) (4 * successCount) / pts.length;
	}
--------- boolean simple ---- 
return i + j == 1 || i == 1 || j == 1;
------------ c'est au fruit qu'on -------
Node left, right;
 int value;
public Node find(int val){
Node current = this;
while(current != null){
if(current.value == val)
return current;
else
current = current.value > val ? current.left : current.right;
 } return null; }
----------- somme range --------
int sum = 0;
 for (int i = 0; i < ints.length; i++) {
 int n = ints[i];
 if (n >= 10 && n <= 100) {
 sum += ints[i];
 }
 }
 return sum;
------- resharp ----
if (n == 0) return "";
 StringBuilder builder = new StringBuilder();
 String newStr = str.replaceAll(" ","");
 for(int i = 0; i < newStr.length(); i ++ ){
 if( i % n == 0 && i != 0) {
 builder.append("\n");
 }
 builder.append(newStr.charAt(i));
 }
return builder.toString();}
------- count frequency ----- 
public static int[] countFrequencies(String[] words){
	 Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i < words.length; i++)
        {
          int count = 0; 
            if (map.containsKey(words[i])) {
               count = map.get(words[i]);
               map.put(words[i], count + 1);
                } else {
               map.put(words[i], 1);
              }
           }
        return map;
	}
------- Fizzbuzz ---- 
 IntStream.rangeClosed(1, 100)
        .mapToObj(i -> i % 5 == 0 ? (i % 7 == 0 ? "FizzBuzz" : "Fizz") : (i % 7 == 0 ? "Buzz" : i))
        .forEach(System.out::println);
-------- art Ascii------- 
   int L = int.Parse(Console.ReadLine());
        int H = int.Parse(Console.ReadLine());
        string T = Console.ReadLine();

        const int A = (int) 'A';
        const int Z = (int) 'Z';

        string str = T.ToUpper();

        for (int i = 0; i < H; i++) {

            string row = Console.ReadLine();
            string ret = "";

            foreach (var s in str) {
                var c = (int) s;

                if (c < A || c > Z)
                    ret+= row.Substring(L * (Z - A + 1), L);
                else
                    ret+= row.Substring(L * (c - A), L);
            }
            Console.WriteLine(ret);
        }
---------- suppression dédoublement ---- 
List<String> listWithDuplicates = new ArrayList<>(Arrays.asList("C++", "Java", "C++"));
 
        List<String> listWithoutDuplicates = new ArrayList<>();
        Set<String> uniqueValues = new HashSet<>();
 
        for (String listWithDuplicate : listWithDuplicates) {
            if (uniqueValues.add(listWithDuplicate)) {
                listWithoutDuplicates.add(listWithDuplicate);
            }
        }
------- filtrage des mots ----- 
public static String filter (String str, String[] tab) {
        String res="";
 
        for (int i=0;i<str.length();i++){
            String charTemp = stringCharAt(str, i);
            if(!contains(tab, charTemp)){
               res=res+charTemp;
            }
        } 
        return res;
    }
public static boolean contains (String[] tab, String c) {
        boolean res=false;
       for (int i=0;i<tab.length;i++){
           	if (areStringEqual(c,tab[i])){
               	res=true;
                break;
            }
       } 
        return res;
    }
-----------Exception ------- 
 try {
        s.setConnection(c);
        s.execute();
        c.commit(); 
    }catch( Exception e) {
        c.rollback(); // si ko on "rollback"
    }finally {
        c.close();  // dans tous les cas : on appelle "close"
    }

------- combinaison possible ----- 
public void generer (Stack <List<Integer>> stack, int index, ArrayList<MemberCoalitions> PlayerCoalitions, int excluded)
    {
        index = index +1;
        if(index < PlayerCoalitions.size()){
            for(int j =0; j< PlayerCoalitions.get(index).Coalitions.size(); j++){
                stack.push(PlayerCoalitions.get(index).Coalitions.get(j));
                generer (stack, index, PlayerCoalitions, excluded);
                stack.pop();
              }
            }
        else{
            this.Combinaiosn.add(new ArrayList<List<Integer>>(stack)); 
        }  
    }
oooorrrrrrrrr
private ArrayList<int[]> possibilities;
    public void nbOfPossibilities(int i, ArrayList<int[]> oldValues){
    	int oldNbOfLines = oldValues.size();
    	possibilities = new ArrayList<int[]>();
    	int[] lineValues;
    	
    	for(int j=0 ; j<(i+1) ; j++){ // Nb blocks
    		for(int k=0 ; k<oldNbOfLines ; k++){ //Lignes par block
    			int indice=0;
    			lineValues = new int[i+1];
				int numLigne = (j*oldNbOfLines)+k;
    			
    			for(int m=0 ; m<(i+1) ; m++){
    				
    				// Cas où on est dans le premier block
    				if(j==0){
    					if(m==0){
    						lineValues[m]=i;
    					}
    					else{
    						lineValues[m]=oldValues.get(k)[m-1];
    					}
    				}
    				else{
    					if(m==j){
    						lineValues[m]=i;
    					}
    					else{
    						lineValues[m]=oldValues.get(k)[indice];
    						indice++;
    					}
    				}
    			}
    			possibilities.add(numLigne, lineValues);
    		}
    	}
    		
    	if(i+1<otherGrayPiecies.size())
    		nbOfPossibilities(i+1,possibilities);
    	else
    		return;
    }
    
    public ArrayList<int[]> initNbOfPossibilitiesDefaultValues(){
		ArrayList<int[]> valuesList = new ArrayList<int[]>();
		
		int[] values = {0,1};
		valuesList.add(0,values);
		
		int[] values2 = {1,0};
		valuesList.add(1,values2);
		
		return valuesList;
    }
--------- jumeaux ----------- 
public static boolean twin( String s1, String s2 ) {
        boolean ret = false;
        if ( s1 == null || s1 == null || s1.equals( "" ) || s2.equals( "" ) ) {
            return ret;
        }
        s1 = s1.toUpperCase();
        s2 = s2.toUpperCase();
        for ( int i = 0; i < s1.length(); i++ ) {
            if ( !s2.contains( "" + s1.charAt( i ) ) ) {
                return ret;
            } else {
                s2 = supprimerCharFromString( s2, s1.charAt( i ) );
            }
        }
        ret = s2.equals( "" );
        return ret;
    }
 
    public static String supprimerCharFromString( String s, char c ) {
        String ret = "";
        boolean b = true;
        for ( int i = 0; i < s.length(); i++ ) {
            if ( b && s.charAt( i ) == c ) {
                b = false;
                continue;
            }
            ret += s.charAt( i );
 
        }
        return ret;
    }
----- chaine de caractere egaux ---- 
return "foo".equals(params) ;
-------- manger ce qu'on veut -- 
 public static int computeDayGains(int nbSeats , int[] payingGuests , int[] guestMovements){
             int sum=0;
Map<Integer,Integer> occupants = new HashMap<>();
Queue queue = new LinkedList<>();
for(int k=1;k<=nbSeats;k++){
occupants.put(k,-1);
}
    for(int i=0;i<guestMovements.length;i++){
        int currentMember=guestMovements[i];
        boolean flag=false;
        if(!queue.contains(currentMember)){
            for(Map.Entry<Integer,Integer> entry: occupants.entrySet()){
                    if(entry.getValue() == -1 && !occupants.containsValue(currentMember)){
                        occupants.put(entry.getKey(),currentMember);
                        flag=true;
                        break;
                    }
                    else if(entry.getValue() == currentMember){
                        occupants.put(entry.getKey(), queue.size()==0?-1: queue.remove());
                        sum+=payingGuests[currentMember];
                        flag=true;
                    }
                }
            if(!flag)    queue.add(currentMember);
        }else{
            queue.remove(currentMember);
        }
    }
    return  sum ;

---------------- le plus grand profit -------- 
public static int findMaxProfit(int[] x, int[] y, int n)
    {
        // cas de base
        if (n < 0) {
            return 0;
        }
 
        // stocke le profit maximum gagné
        int profit = 0;
 
        // vendre le premier stock le nième jour, et se répéter le (n-1)ième jour
        profit = Integer.max(profit, x[n] + findMaxProfit(x, y, n - 1));
 
        // vendre le deuxième stock le nième jour, et se répéter le (n-2)ième jour
        // (aucune transaction ne peut être effectuée le (n-1)ème jour)
        profit = Integer.max(profit, y[n] + findMaxProfit(x, y, n - 2));
 
        // retourne le profit maximum
        return profit;
    }
------------duodigt-- 
int i = -3333;
        String s = String.valueOf(i).replace("-", "");
        Map<Integer, Integer> map = new HashMap<>();
        for (int j = 0; j < s.length(); j  ) {
            map.merge((int) s.charAt(j), 1, Integer::sum);
        }
        long count = map.values()
                        .size();
        System.out.println(count > 2 ? "true" : "false");

---------- longest profitable trade --- 
for(int i = 0; i < lines.size(); i++){
        for(int j = lines.size()-1; j >= 0; j--){
            try
            {
                String[] partsFirst = lines.get(i).split(",");
                String[] partsLast = lines.get(j).split(",");

                String firstPriceString = partsFirst[1];
                String lastPriceString = partsLast[1];

                String firstDateString = partsFirst[0];
                String lastDateString = partsLast[0];

                double firstPriceInt = Double.parseDouble(firstPriceString);
                double lastPriceInt = Double.parseDouble(lastPriceString);


                Date date1 = format.parse(firstDateString);
                Date date2 = format.parse(lastDateString);
                long difference = date2.getTime() - date1.getTime();
                //optimization
                if(difference <= maxDuration)
                    continue;
                if(lastPriceInt > firstPriceInt && (difference) > maxDuration)
                    maxDuration = difference;
            }
            catch (ParseException ex)
            {
                System.out.println("Exception "+ex);
            }
        }
    }
 